            // Start of the Animation.
            var canvas = document.getElementById("overview");
            var stage = new createjs.Stage("overview");

            stage.enableMouseOver(10); // 10 updates per second

            var circle = new createjs.Shape();
            circle.graphics.beginFill("red").drawCircle(0, 0, 40);
            circle.x = circle.y = 50;

            circle.addEventListener("added", added);            // Event {type: "added", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: false…}
            circle.addEventListener("click ", click);           // MouseEvent {type: "click", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("dblclick", dblclick);      // MouseEvent {type: "dblclick", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("mousedown ", mousedown);   // MouseEvent {type: "mousedown", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("mouseout ", mouseout);     // ENABLEMOUSEOVER MouseEvent {type: "mouseout", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("mouseover ", mouseover);   // ENABLEMOUSEOVER MouseEvent {type: "mouseover", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("pressmove ", pressmove);   //  MouseEvent {type: "pressmove", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            circle.addEventListener("pressup ", pressup);       // MouseEvent {type: "pressup", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: true…}
            // Roll = 1x on in/out
            circle.addEventListener("rollout", rollout);        // MouseEvent {type: "rollout", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: false…}
            circle.addEventListener("rollover", rollover);      // MouseEvent {type: "rollover", target: Shape, currentTarget: Shape, eventPhase: 2, bubbles: false…}

            stage.addChild(circle);

            stage.update();

            function added(x) { console.log(x); }
            function click(x) { console.log(x); }
            function dblclick(x) { console.log(x); }
            function mousedown(x) { console.log(x); }
            function mouseout(x) { console.log(x); }
            function mouseover(x) { console.log(x); }
            function pressmove(x) { console.log(x); }
            function pressup(x) { console.log(x); }
            function removed(x) { console.log(x); }
            function rollout(x) { console.log(x); }
            function rollover(x) { console.log(x); }
            function tick(x) { console.log(x); }





















			/*
    Project: Make It Happen (Toolset for Generation of choice-and-consequence games)
    Subproject: Author (Tool/App) - Writer (Person) uses the Author to create the game (*.book)
    Authors: Countryen
    This Project is Open Source, see the LICENCE-File for more information.
    https://github.com/countryen/make-it-happen

    File-Info:
    overview.js -> Controller for overview.html -> registering events etc.
    Countryen, 11th July 2015 @ C0 | VS-Villingen.
    + "12th July 2015"
*/
(function () {
    // Global app-class.
    var app = new Author.App();

    // TEST -> onclick -> Test the canvas with createjs http://createjs.com/
    window.addEventListener("load", function () {
        var testButton = document.getElementById("TEST");
        var id = -1;
        testButton.onclick = function () {
            // Start of the Animation.
            var canvas = document.getElementById("overview");
            //stage = (id == -1) ? new createjs.Stage("overview") : new createjs.Stage(id + "");
            var stage = new createjs.Stage("overview-canvas");
            var rect = new createjs.Shape();
            console.log(rect);
            rect.graphics.beginFill("red").drawRect(0, 0, 15, 15);
            rect.x = rect.y = 50;
            rect.addEventListener("pressup", rect_pressup);

            stage.addChild(rect);

            stage.update();

            function rect_pressup(mousePressupEvent) {
                console.log(mousePressupEvent.currentTarget);
                console.log(mousePressupEvent.currentTarget.x + " " + mousePressupEvent.currentTarget.y);
                console.log(mousePressupEvent.stageX + " " + mousePressupEvent.stageY);
                mousePressupEvent.currentTarget.x = mousePressupEvent.stageX;
                mousePressupEvent.currentTarget.y = mousePressupEvent.stageY;
                stage.update();

            }
            id = stage.id;
            var p1 = new DrawnPage(null);
            p1.addToStage(stage);
            stage.update();

        };
    });

    // Adds fullscreen support. Resizes the content to the window (+ onresize)
    // Only works when the html uses the full-editor* classes!
    window.addEventListener("load", function () {
        var overviewContainer = document.getElementById("overview-canvas-container");
        var pagesContainer = document.getElementById("overview-pages-container");
        var toolbarContainer = document.getElementById("overview-toolbar-container");
        // Resizing the elements to window-size (minus margins/paddings etc.)
        overviewContainer.style.height = (window.innerHeight - 0.04 * window.innerHeight) + "px";
        pagesContainer.style.height = (window.innerHeight - 0.11 * window.innerHeight) + "px";
        toolbarContainer.style.height = (window.innerHeight - 0.04 * window.innerHeight) + "px";
        // Now the same onresize of the window (when the user ZOOMS out/in)
        window.addEventListener("resize", function () {
            overviewContainer.style.height = (window.innerHeight - 0.04 * window.innerHeight) + "px";
            pagesContainer.style.height = (window.innerHeight - 0.11 * window.innerHeight) + "px";
            toolbarContainer.style.height = (window.innerHeight - 0.04 * window.innerHeight) + "px";
           
        });
    });

    /*************************************************************************************/
    /**
        Region: Classes and Functions for the use of the canvas -> rendering the overview
        Uses classes from createjs (see: http://www.createjs.com/)
    */
    /*************************************************************************************/
    function OverviewCanvas(stage) {
        this.stage = null;
        this.container = null;
        /* Constructor. */
        {
            this.stage = stage;
            this.container = new createjs.Container();

        }

        this.addPageToContainer = function () {
            var box = new createjs.Shape();
            box.beginFill("black").drawRect(0, 0, 100, 100);
            this.container.addChild(box)
        };

        /**
            Draws everything at once (to the stage)
            1. Container
            2. Boxes
            3. Pages (L->R, T->B)
            4. Connections (L-R, T->B)
        */
        this.draw = function () {
            this.stage.clear();
            this.stage.removeAllChildren();
            container.addToStage(this.stage);
            this.stage.update();

        };




    }

})();